{
  "address": "0x5847BB86C07853f4eD1CC3508E2e2ECb6B8C579b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TransferComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "TransferInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "initiateTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "breedNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintTransferredToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a557dab3cd8b08eec0b13743acac5754c8d2850e749c231afa66921407aca15",
  "receipt": {
    "to": null,
    "from": "0x89A4e662CCb3819F881f488dBa96c35093Eec624",
    "contractAddress": "0x5847BB86C07853f4eD1CC3508E2e2ECb6B8C579b",
    "transactionIndex": 12,
    "gasUsed": "925594",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800010000000000000000000000020000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000100000000000000800000000000000000080000000000000400000000008000000000000000000000000000000000000000000000000000000200000000000008000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000001020000000200000000000000000000000000000000000000000004000000000300000",
    "blockHash": "0x40d7eeae60d829744823bd7374285052193382ed8cfd461b9cc662bebd054a37",
    "transactionHash": "0x2a557dab3cd8b08eec0b13743acac5754c8d2850e749c231afa66921407aca15",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 40432100,
        "transactionHash": "0x2a557dab3cd8b08eec0b13743acac5754c8d2850e749c231afa66921407aca15",
        "address": "0x5847BB86C07853f4eD1CC3508E2e2ECb6B8C579b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000089a4e662ccb3819f881f488dba96c35093eec624"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x40d7eeae60d829744823bd7374285052193382ed8cfd461b9cc662bebd054a37"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 40432100,
        "transactionHash": "0x2a557dab3cd8b08eec0b13743acac5754c8d2850e749c231afa66921407aca15",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000089a4e662ccb3819f881f488dba96c35093eec624",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000611bd05bf79c8000000000000000000000000000000000000000000000000045d6035eb888cc100000000000000000000000000000000000000000000115dbfc29aff7c27a31600000000000000000000000000000000000000000000000004574e78e5c912f900000000000000000000000000000000000000000000115dbfc8acbc81e71cde",
        "logIndex": 85,
        "blockHash": "0x40d7eeae60d829744823bd7374285052193382ed8cfd461b9cc662bebd054a37"
      }
    ],
    "blockNumber": 40432100,
    "cumulativeGasUsed": "4210187",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6825204FE7d83E46cF0dBB0bf0D70e254Ec21A98"
  ],
  "numDeployments": 1,
  "solcInputHash": "9f3183c8b4e32f439bfada0d3c754da0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"TransferInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"breedNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintTransferredToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftBridge.sol\":\"NftBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/INftBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface INftBridge is IERC721 {\\n    enum Breed {\\n        PUG,\\n        SHIBA_INU,\\n        ST_BERNARD\\n    }\\n\\n    function mintNft(address to, uint256 tokenId, uint256 breedNumber) external returns (uint256);\\n\\n    function burnNft(address owner, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x29a9cbcb39a9689aaea5ae08e694a1af23887a376f83f725fc367834037c9202\",\"license\":\"MIT\"},\"contracts/NftBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./INftBridge.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror InvalidSignature(bytes32);\\n\\ncontract NftBridge is ReentrancyGuard, Ownable {\\n    INftBridge private s_NftToken;\\n\\n    event TransferInitiated(address owner, uint256 tokenId, uint256 nonce, bytes signature);\\n\\n    event TransferComplete(address owner, uint256 tokenId);\\n\\n    constructor(address nftTokenAddress) {\\n        s_NftToken = INftBridge(nftTokenAddress);\\n    }\\n\\n    function initiateTransfer(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) public nonReentrant onlyOwner {\\n        s_NftToken.burnNft(msg.sender, tokenId);\\n        emit TransferInitiated(msg.sender, tokenId, nonce, signature); // add add amount symbol\\n    }\\n\\n    function mintTransferredToken(\\n        uint256 breedNumber,\\n        address to,\\n        uint256 tokenId,\\n        uint256 nonce,\\n        bytes calldata signature\\n    ) public nonReentrant onlyOwner {\\n        bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, tokenId, nonce));\\n        bytes32 signedMessagehash = prefixed(messageHash);\\n        address toVerify = recoverSigner(signedMessagehash, signature);\\n\\n        if (toVerify != to) revert InvalidSignature(signedMessagehash);\\n\\n        s_NftToken.mintNft(to, tokenId, breedNumber);\\n\\n        emit TransferComplete(msg.sender, tokenId);\\n    }\\n\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig) internal pure returns (address) {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (v, r, s) = splitSignature(sig);\\n\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) internal pure returns (uint8, bytes32, bytes32) {\\n        require(sig.length == 65);\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            // first 32 bytes, after the length prefix\\n            r := mload(add(sig, 32))\\n            // second 32 bytes\\n            s := mload(add(sig, 64))\\n            // final byte (first byte of the next 32 bytes)\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0x8116398af18bebae0853965b49524c1d6995ee916d3a864d2c04d35ef59420c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001090380380620010908339818101604052810190620000379190620001df565b60016000819055506200005f62000053620000a760201b60201c565b620000af60201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000211565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a7826200017a565b9050919050565b620001b9816200019a565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b600060208284031215620001f857620001f762000175565b5b60006200020884828501620001c8565b91505092915050565b610e6f80620002216000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634b181a6e1461005c5780636633010714610078578063715018a6146100945780638da5cb5b1461009e578063f2fde38b146100bc575b600080fd5b61007660048036038101906100719190610823565b6100d8565b005b610092600480360381019061008d91906108bd565b6102e4565b005b61009c6103d0565b005b6100a66103e4565b6040516100b39190610940565b60405180910390f35b6100d660048036038101906100d1919061095b565b61040e565b005b6100e0610492565b6100e86104e2565b60003385856040516020016100ff939291906109f1565b604051602081830303815290604052805190602001209050600061012282610560565b905060006101748286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610590565b90508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146101e657816040517f666b7cba0000000000000000000000000000000000000000000000000000000081526004016101dd9190610a47565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf7c7c7889898c6040518463ffffffff1660e01b815260040161024593929190610a71565b602060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610abd565b507ffa52d709ff7ad7d11a17ae48887a7a1d722ec1e5fea0005cbdd946bf5c50a99b33886040516102c9929190610aea565b60405180910390a15050506102dc610605565b505050505050565b6102ec610492565b6102f46104e2565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c77b6dfd33866040518363ffffffff1660e01b8152600401610351929190610aea565b600060405180830381600087803b15801561036b57600080fd5b505af115801561037f573d6000803e3d6000fd5b505050507f46953f90efdff70b21829dc36fbf3050f861df02925c52766d52ce988490745c33858585856040516103ba959493929190610b71565b60405180910390a16103ca610605565b50505050565b6103d86104e2565b6103e2600061060f565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104166104e2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90610c42565b60405180910390fd5b61048f8161060f565b50565b600260005414156104d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cf90610cae565b60405180910390fd5b6002600081905550565b6104ea6106d5565b73ffffffffffffffffffffffffffffffffffffffff166105086103e4565b73ffffffffffffffffffffffffffffffffffffffff161461055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610d1a565b60405180910390fd5b565b6000816040516020016105739190610db2565b604051602081830303815290604052805190602001209050919050565b60008060008061059f856106dd565b809350819450829550505050600186848484604051600081526020016040526040516105ce9493929190610df4565b6020604051602081039080840390855afa1580156105f0573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6001600081905550565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080600060418451146106f057600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b600080fd5b600080fd5b6000819050919050565b61073d8161072a565b811461074857600080fd5b50565b60008135905061075a81610734565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078b82610760565b9050919050565b61079b81610780565b81146107a657600080fd5b50565b6000813590506107b881610792565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107e3576107e26107be565b5b8235905067ffffffffffffffff811115610800576107ff6107c3565b5b60208301915083600182028301111561081c5761081b6107c8565b5b9250929050565b60008060008060008060a087890312156108405761083f610720565b5b600061084e89828a0161074b565b965050602061085f89828a016107a9565b955050604061087089828a0161074b565b945050606061088189828a0161074b565b935050608087013567ffffffffffffffff8111156108a2576108a1610725565b5b6108ae89828a016107cd565b92509250509295509295509295565b600080600080606085870312156108d7576108d6610720565b5b60006108e58782880161074b565b94505060206108f68782880161074b565b935050604085013567ffffffffffffffff81111561091757610916610725565b5b610923878288016107cd565b925092505092959194509250565b61093a81610780565b82525050565b60006020820190506109556000830184610931565b92915050565b60006020828403121561097157610970610720565b5b600061097f848285016107a9565b91505092915050565b60008160601b9050919050565b60006109a082610988565b9050919050565b60006109b282610995565b9050919050565b6109ca6109c582610780565b6109a7565b82525050565b6000819050919050565b6109eb6109e68261072a565b6109d0565b82525050565b60006109fd82866109b9565b601482019150610a0d82856109da565b602082019150610a1d82846109da565b602082019150819050949350505050565b6000819050919050565b610a4181610a2e565b82525050565b6000602082019050610a5c6000830184610a38565b92915050565b610a6b8161072a565b82525050565b6000606082019050610a866000830186610931565b610a936020830185610a62565b610aa06040830184610a62565b949350505050565b600081519050610ab781610734565b92915050565b600060208284031215610ad357610ad2610720565b5b6000610ae184828501610aa8565b91505092915050565b6000604082019050610aff6000830185610931565b610b0c6020830184610a62565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610b508385610b13565b9350610b5d838584610b24565b610b6683610b33565b840190509392505050565b6000608082019050610b866000830188610931565b610b936020830187610a62565b610ba06040830186610a62565b8181036060830152610bb3818486610b44565b90509695505050505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c2c602683610bbf565b9150610c3782610bd0565b604082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610c98601f83610bbf565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d04602083610bbf565b9150610d0f82610cce565b602082019050919050565b60006020820190508181036000830152610d3381610cf7565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610d7b601c83610d3a565b9150610d8682610d45565b601c82019050919050565b6000819050919050565b610dac610da782610a2e565b610d91565b82525050565b6000610dbd82610d6e565b9150610dc98284610d9b565b60208201915081905092915050565b600060ff82169050919050565b610dee81610dd8565b82525050565b6000608082019050610e096000830187610a38565b610e166020830186610de5565b610e236040830185610a38565b610e306060830184610a38565b9594505050505056fea2646970667358221220bade47acdb6c7f562112d6c36502454e0f2f5fc76933b15f4be2b9891108835c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634b181a6e1461005c5780636633010714610078578063715018a6146100945780638da5cb5b1461009e578063f2fde38b146100bc575b600080fd5b61007660048036038101906100719190610823565b6100d8565b005b610092600480360381019061008d91906108bd565b6102e4565b005b61009c6103d0565b005b6100a66103e4565b6040516100b39190610940565b60405180910390f35b6100d660048036038101906100d1919061095b565b61040e565b005b6100e0610492565b6100e86104e2565b60003385856040516020016100ff939291906109f1565b604051602081830303815290604052805190602001209050600061012282610560565b905060006101748286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610590565b90508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146101e657816040517f666b7cba0000000000000000000000000000000000000000000000000000000081526004016101dd9190610a47565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf7c7c7889898c6040518463ffffffff1660e01b815260040161024593929190610a71565b602060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610abd565b507ffa52d709ff7ad7d11a17ae48887a7a1d722ec1e5fea0005cbdd946bf5c50a99b33886040516102c9929190610aea565b60405180910390a15050506102dc610605565b505050505050565b6102ec610492565b6102f46104e2565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c77b6dfd33866040518363ffffffff1660e01b8152600401610351929190610aea565b600060405180830381600087803b15801561036b57600080fd5b505af115801561037f573d6000803e3d6000fd5b505050507f46953f90efdff70b21829dc36fbf3050f861df02925c52766d52ce988490745c33858585856040516103ba959493929190610b71565b60405180910390a16103ca610605565b50505050565b6103d86104e2565b6103e2600061060f565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104166104e2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90610c42565b60405180910390fd5b61048f8161060f565b50565b600260005414156104d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cf90610cae565b60405180910390fd5b6002600081905550565b6104ea6106d5565b73ffffffffffffffffffffffffffffffffffffffff166105086103e4565b73ffffffffffffffffffffffffffffffffffffffff161461055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610d1a565b60405180910390fd5b565b6000816040516020016105739190610db2565b604051602081830303815290604052805190602001209050919050565b60008060008061059f856106dd565b809350819450829550505050600186848484604051600081526020016040526040516105ce9493929190610df4565b6020604051602081039080840390855afa1580156105f0573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6001600081905550565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080600060418451146106f057600080fd5b60008060006020870151925060408701519150606087015160001a90508083839550955095505050509193909250565b600080fd5b600080fd5b6000819050919050565b61073d8161072a565b811461074857600080fd5b50565b60008135905061075a81610734565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078b82610760565b9050919050565b61079b81610780565b81146107a657600080fd5b50565b6000813590506107b881610792565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107e3576107e26107be565b5b8235905067ffffffffffffffff811115610800576107ff6107c3565b5b60208301915083600182028301111561081c5761081b6107c8565b5b9250929050565b60008060008060008060a087890312156108405761083f610720565b5b600061084e89828a0161074b565b965050602061085f89828a016107a9565b955050604061087089828a0161074b565b945050606061088189828a0161074b565b935050608087013567ffffffffffffffff8111156108a2576108a1610725565b5b6108ae89828a016107cd565b92509250509295509295509295565b600080600080606085870312156108d7576108d6610720565b5b60006108e58782880161074b565b94505060206108f68782880161074b565b935050604085013567ffffffffffffffff81111561091757610916610725565b5b610923878288016107cd565b925092505092959194509250565b61093a81610780565b82525050565b60006020820190506109556000830184610931565b92915050565b60006020828403121561097157610970610720565b5b600061097f848285016107a9565b91505092915050565b60008160601b9050919050565b60006109a082610988565b9050919050565b60006109b282610995565b9050919050565b6109ca6109c582610780565b6109a7565b82525050565b6000819050919050565b6109eb6109e68261072a565b6109d0565b82525050565b60006109fd82866109b9565b601482019150610a0d82856109da565b602082019150610a1d82846109da565b602082019150819050949350505050565b6000819050919050565b610a4181610a2e565b82525050565b6000602082019050610a5c6000830184610a38565b92915050565b610a6b8161072a565b82525050565b6000606082019050610a866000830186610931565b610a936020830185610a62565b610aa06040830184610a62565b949350505050565b600081519050610ab781610734565b92915050565b600060208284031215610ad357610ad2610720565b5b6000610ae184828501610aa8565b91505092915050565b6000604082019050610aff6000830185610931565b610b0c6020830184610a62565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610b508385610b13565b9350610b5d838584610b24565b610b6683610b33565b840190509392505050565b6000608082019050610b866000830188610931565b610b936020830187610a62565b610ba06040830186610a62565b8181036060830152610bb3818486610b44565b90509695505050505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c2c602683610bbf565b9150610c3782610bd0565b604082019050919050565b60006020820190508181036000830152610c5b81610c1f565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610c98601f83610bbf565b9150610ca382610c62565b602082019050919050565b60006020820190508181036000830152610cc781610c8b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d04602083610bbf565b9150610d0f82610cce565b602082019050919050565b60006020820190508181036000830152610d3381610cf7565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610d7b601c83610d3a565b9150610d8682610d45565b601c82019050919050565b6000819050919050565b610dac610da782610a2e565b610d91565b82525050565b6000610dbd82610d6e565b9150610dc98284610d9b565b60208201915081905092915050565b600060ff82169050919050565b610dee81610dd8565b82525050565b6000608082019050610e096000830187610a38565b610e166020830186610de5565b610e236040830185610a38565b610e306060830184610a38565b9594505050505056fea2646970667358221220bade47acdb6c7f562112d6c36502454e0f2f5fc76933b15f4be2b9891108835c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/NftBridge.sol:NftBridge",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/NftBridge.sol:NftBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 371,
        "contract": "contracts/NftBridge.sol:NftBridge",
        "label": "s_NftToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INftBridge)355"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(INftBridge)355": {
        "encoding": "inplace",
        "label": "contract INftBridge",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}